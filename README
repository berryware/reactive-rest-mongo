reactive-rest-mongo
===================

This project implements a rest api pattern using Scala 2.11.x, Activator, ReactiveMongo, and MongoDB. It provides built-in Rest API processing so that a minimal number of files need to be added for new api calls. For each domain object that needs to be served up via the api, a new domain case class and object need to be created, a new empty controller file is created,  and new routes added to the play routes file. That's it.

This code has been used in production now since June 2015

This project is based on the work of Pedro De Almeida https://gist.github.com/almeidap/5685801, the work of Trialfire's Max Kremer and Marconi Lanna http://www.slideshare.net/MaxKremer/play-scala-reactive-mongo, StormPath http://docs.stormpath.com/rest/product-guide/#rest-api-general-concepts, and Eugene Burmako's reflection help

Key Goals met by this framework:
1. Immutable
2. Asynchronous
3. Minimal new files added/updated for every new domain object. New Domain file (case class and companion object), new empty controller which sets the type of the Domain object and new routes are the only files that need to get touched for adding basic rest calls of GET, POST, PUSH, DELETE, and GET (multiple).
4. A REST api that allows all basic CRUD commands as well as a builtin filtering capability for bringing down or deleting multiple domain objects
5. A REST api with paging built in

This framework does not use the JSON COAST-TO-COAST capabilities of ReactiveMongo. I found that using BSON and providing specific BSON Readers and Writers gave me the greatest flexibility to use Mongo specific datatypes in the database and only Scala types in the domain objects. It is also very clear from the mappings in the companion object of what is actually transpiring.

When I first built this api there was not a lot of documentation on how to do all that I have done, so I wanted to make this available to make someone else's life a bit easier.

If you want to know how it works start with test/controllers/UserSpec. UserSpec tests all the features of the Rest API framework.

Tests can be run using either activator or sbt

To run the tests with activator:
cd reactive-rest-mongo
dberry $ activator
[info] Loading project definition from /Users/dberry/project/exaxis/reactive-rest-mongo/project
[info] Set current project to reactive-rest-mongo (in build file:/Users/dberry/project/exaxis/reactive-rest-mongo/)
[reactive-rest-mongo] $ test

To run the tests with sbt:
cd reactive-rest-mongo
dberry $ sbt
Use of ~/.sbtconfig is deprecated, please migrate global settings to /usr/local/etc/sbtopts
[info] Loading project definition from /Users/dberry/project/exaxis/reactive-rest-mongo/project
[info] Set current project to reactive-rest-mongo (in build file:/Users/dberry/project/exaxis/reactive-rest-mongo/)
[reactive-rest-mongo] $ test

You can also run the project and use curl to exercise the REST API


To set up the mongo db on OSX using brew:

# Install Mongo
  
  brew install mongodb
  mkdir -p /data/db

# Start Mongo

  mongod --dbpath /data/db


The following curl request will result in an error that lists the available endpoitns:

  http://localhost:9000/user


